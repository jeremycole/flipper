@node   Quick Start
@chapter Quick Start

Follow the instructions here to get started with Flipper in just a few minutes.

These instructions relate to the pre-release versions of Flipper.

@section Before you begin

Before you begin, make sure you have the following together:

@itemize @bullet
@item Two machines to act as masters, on the same subnet, vlan, etc. and capable of floating an IP address between them.
@item Two IP addresses reserved to share between the masters for reads and writes.
@end itemize

@section Installation

First of all, check out Flipper from the Proven Scaling Subversion repository to the node you'll use for managing your masterpairs.

The flipper script assumes @file{perl} will be in @file{/usr/bin}.  If your Perl executable is located somewhere else, either change the @code{#!} line in the @file{flipper} script (the first line), or better still put a symlink in place in @file{/usr/bin/perl} to your perl binary, as there are plenty of other scripts out there which rely on perl being in @file{/usr/bin}.

Copy the @file{flipper} script to @file{/usr/bin}.

Copy the @file{lib/Flipper} directory to some place in perl's @code{@@INC} on your system.  To list the directories in @code{@@INC} on your system, run @command{perl -e 'print join "\n",@@INC'}.

@file{/usr/lib/perl5/site_perl}, @file{/usr/local/lib/perl5/site_perl} on Linux/Solaris/BSD and @file{/Library/Perl} on Mac OS X are good places to put the @file{Flipper} directory.

For more information on installing Flipper, @xref{Installation}.

@section Metadata

Flipper uses a database for storing it's configuration information.  This database can be stored in any DBMS supported by Perl's DBI, but currently only MySQL has been tested.

Create the metadata database on a node, then populate it using the schema definition contained in the @file{sql/metadata.sql} file in subversion.  The metadata database can reside on one of the masterpairs that you intend to manage using Flipper, or it can live on a separate database server.

Currently, Flipper requires only read access to the metadata database.

@section Pointing Flipper at the Metadata

Flipper uses a DSN-like string to locate it's metadata, along with a username and password for authentication.

These three items of information can be passed to flipper on the command line, using the @code{--metadata} or @code{-m} switch for the DSN string, and @code{--username} or @code{-u} and @code{--password} or @code{-p} switches for the username and password respectively.

You will probably find it more convenient to add a @code{[flipper]} section to your @file{my.cnf} file (or create a @file{~/.my.cnf} file) containing lines for the metadata DSN, username and password, like this:

@example
[flipper]
metadata=DBI:mysql:database=flippermetadata;mysql_socket=/tmp/mysql.sock
username=flippermetadata
password=letmein
@end example

@section Configuration

Configuration has to be done manually at the moment.  Future versions of Flipper will allow you to use the script itself to manage the configuration.

First, decide on a name for your first masterpair, and decide on names for the two nodes.

@subsection IP address information

Insert rows into the masterpair and node tables for the IP addresses of the two nodes and the read and write IP addresses that you will be moving between the nodes.  See @ref{ip configuration variable}, @ref{read_ip configuration variable}, @ref{write_ip configuration variable}.

@example
INSERT INTO masterpair (masterpair, name, value) VALUES('<masterpair name>', 'read_ip', '<read ip address>');
INSERT INTO masterpair (masterpair, name, value) VALUES('<masterpair name>', 'write_ip', '<write ip address>');
INSERT INTO node (masterpair, node, name, value) VALUES('<masterpair name>', '<first node name>', 'ip', '<first node ip address>');
INSERT INTO node (masterpair, node, name, value) VALUES('<masterpair name>', '<second node name>', 'ip', '<second node ip address>');
@end example

You'll also need to insert a row into the masterpair table for the netmask of the network containing the nodes.  See @ref{netmask configuration variable}.

@example
INSERT INTO masterpair (masterpair, name, value) VALUES('<masterpair name>', 'netmask', '<network netmask>');
@end example

@subsection ARP sending command

When an IP address is moved from one node to another, an ARP message needs to be sent out to inform other nodes (servers, routers etc) on the network that the IP address is now available on a different physical (MAC) address.

Most modern UNIX-based operating systems send an ARP message out automatically when an IP address is brought up on an interface, and will handle the ARP messages correctly when they receive them.

Linux does not send ARP messages out automatically, although it does handle receipt of them correctly.   Therefore Flipper needs to be told how to send the ARP message out.

On RedHat Enterprise Linux, CentOS and Fedora, the @code{arping} command, supplied with the operating system, can be used to send ARP messages.  In order to use @code{arping}, insert a row into the masterpair table.

@example
INSERT INTO masterpair (masterpair, name, value) VALUES('<masterpair name>', 'send_arp_command', '/sbin/arping -I $sendarp_interface -c 5 -U -A $sendarp_ip');
@end example

You may need to insert a row into the masterpair table for the broadcast address of the network containing the nodes if this is required by the command you're using to send ARP messages.

For more information, see @ref{send_arp_command configuration variable}.

@subsection MySQL authentication

Flipper needs to be given authentication information so it can connect to the MySQL servers running on the nodes.  By default, it will attempt to connect as @code{root} with no password, on port 3306.  If these defaults are not suitable, insert rows into the masterpair table to tell Flipper how to log into MySQL.  This assumes the same authentication credentials are to be used on each node.  See @ref{mysql_user configuration variable}, @ref{mysql_password configuration variable}, @ref{mysql_port configuration variable}.

@example
INSERT INTO masterpair (masterpair, name, value) VALUES('<masterpair name>', 'mysql_user', '<mysql username>');
INSERT INTO masterpair (masterpair, name, value) VALUES('<masterpair name>', 'mysql_password', '<mysql password>');
@end example

@subsection SSH authentication

By default, Flipper will ssh to the nodes as the user running the @command{flipper} script.  To change this, either set the @ref{ssh_user configuration variable} configuration variable or alternatively edit @file{~/.ssh/config}.

@example
INSERT INTO masterpair (masterpair, name, value) VALUES('<masterpair name>', 'ssh_user', '<ssh username>');
@end example

By default, Flipper will use sudo for privilege escalation on the nodes, where required.  This is required for non-superusers to execute operations such as bringing down/up IP addresses.  You will need to configure @command{sudo} on the nodes to enable this.  If you set @ref{ssh_user configuration variable} to 'root', you can turn the use of @command{sudo} off if required by setting the @ref{use_sudo configuration variable} to 0.

The security implications of the various possible settings for @ref{ssh_user configuration variable}, @ref{use_sudo configuration variable}, and ssh and sudo configuration on the nodes are significant.  You are strongly advised to make yourself aware of them.  See @ref{ssh and sudo security} for more information.

@subsection Check configuration

Once you've pointed Flipper at the Metadata, and configured Flipper correctly, you should be able to use Flipper's @command{config} command to display the configuration information for a particular masterpair.  For example, to display all the configuration values for a masterpair called @samp{mike}:

@example
$ @b{flipper mike config}
MASTERPAIR: mike
        write_ip: 10.6.0.67
        send_arp_command: arping -I $sendarp_interface -c 5 -U -A $sendarp_ip
        read_ip: 10.6.0.66
        netmask: 255.255.255.0
NODE: first_node
        ip: 10.6.0.64
NODE: second_node
        ip: 10.6.0.65
$ 
@end example

If you've not pointed Flipper to the Metadata database correctly, you'll be presented with an error which should give useful information as to what the problem was:

@example
$ @b{flipper mike config}
Couldn't connect using username 'root' to DSN:
DBI:mysql:database=wrongdb

The error from DBI was:
Unknown database 'wrongdb'

Check that the DSN, username and password specified in my.cnf or as options
to this script are all correct.
$ 
@end example

To display a list of the masterpairs, just run @command{flipper} with no command:

@example
$ @b{flipper}
The following masterpairs exist:
        mike
$
@end example

@section Set up IP addresses

Once Flipper's configured, it's ready to use.  The @command{status} command gives an at-a-glance report on the status of a particular masterpair.  The first time you run Flipper, the read and write IPs won't be up, and the @command{status} command will give output similar to this:

@example
$ @b{flipper mike status}
MASTERPAIR: mike
NODE: first_node is writable, replication running, 0s delay
NODE: second_node is writable, replication running, 0s delay
WARNING: No node has the read IP
WARNING: No node has the write IP
$
@end example

This tells us that both nodes in the masterpair @samp{mike} are up, MySQL is writable on both nodes, replication is running on both nodes with no delay, but the read and write IPs are not up on either node.  We use Flipper's @command{set} command to bring the IP up on the appropriate node.  In this case, we bring the read IP up on the @samp{first_node} node, and the write IP up on the @samp{second_node} node.  The warnings are self-explanatory.

@example
$ @b{flipper mike set read first_node}
WARNING: read IP is not up on second_node node.
WARNING: Won't attempt to take down read IP on second_node node.
$ @b{flipper mike set write second_node}
WARNING: write IP is not up on first_node node.
WARNING: Won't attempt to take down write IP on first_node node.
$ @b{flipper mike status}
MASTERPAIR: mike
NODE: first_node has read IP, is read-only, replication running, 0s delay
NODE: second_node has write IP, is writable, replication running, 0s delay
$
@end example

@section Using Flipper

This is just a quick overview of what Flipper can do.  More detail can be found elsewhere in this documentation.  Help is available on the command line by running @command{flipper --help} for usage information and @command{perldoc flipper} for a brief overview.

Flipper's @command{set} command ensures an IP is running on a particular node.  If it's already running on the node you specify, it won't be moved.  If it's running on the other node, it will be moved.

The @command{swap} command moves IPs from one node to another.  If you specify an IP, it will move only the IP you specify, otherwise all IPs will be moved to the other node.

The @command{disable} command moves any IPs that are up on a particular node to the other node.  This is useful for taking a machine out of use for maintenance.  The @command{fail} command is similar to the @command{disable} command, but is used for handling nodes which have suffered an external permanent or semi-permanent failure.

The following example demonstrates the use of the commands.  We use the @command{status} command to display the current status:

@example
$ @b{flipper mike status}
MASTERPAIR: mike
NODE: first_node has read IP, is read-only, replication running, 0s delay
NODE: second_node has write IP, is writable, replication running, 0s delay
$ @b{flipper mike swap}
$ @b{flipper mike status}
MASTERPAIR: mike
NODE: first_node has write IP, is writable, replication running, 0s delay
NODE: second_node has read IP, is read-only, replication running, 0s delay
$ @b{flipper mike set read first_node}
$ @b{flipper mike status}
MASTERPAIR: mike
NODE: first_node has read IP, has write IP, is writable, replication running, 0s delay
NODE: second_node is read-only, replication running, 0s delay
$ @b{flipper mike disable first_node}
$ @b{flipper mike status}
MASTERPAIR: mike
NODE: first_node is read-only, replication running, 0s delay
NODE: second_node has read IP, has write IP, is writable, replication running, 0s delay
$
@end example

